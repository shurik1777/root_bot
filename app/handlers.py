from datetime import datetime

from aiogram import Router, F, html
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.utils.formatting import (
    Bold, as_list, as_marked_section, as_key_value, HashTag, Text
)

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f'Hello {message.from_user.first_name}')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1 –ø–æ–¥–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
@router.message(Command("test1"))
async def cmd_test1(message: Message):
    await message.reply("Test 1")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2 –ø–æ–¥–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ —Ç–æ—á–µ—á–Ω—É—é –∞–Ω–Ω–∞—Ç–∞—Ü–∏—é
async def cmd_test2(message: Message):
    await message.reply("Test 2")


router.message.register(cmd_test2, Command("test2"))


@router.message(Command("answer"))
async def cmd_answer(message: Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")


@router.message(Command("reply"))
async def cmd_reply(message: Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')


@router.message(Command("dice"))
async def cmd_dice(message: Message):
    await message.answer_dice(emoji="üé≤")


@router.message(Command("add_to_list"))
async def cmd_add_to_list(message: Message, mylist: list[int]):
    mylist.append(7)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 7")


@router.message(Command("show_list"))
async def cmd_show_list(message: Message, mylist: list[int]):
    await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")


@router.message(Command("info"))
async def cmd_info(message: Message, started_at: str):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {started_at}")


# –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä F.text,
# —Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é /test
@router.message(F.text, Command("test"))
async def any_message(message: Message):
    await message.answer(
        "Hello, <b>world</b>!",
        parse_mode=ParseMode.HTML
    )
    await message.answer(
        "Hello, *world*\!",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å <u>HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π</u>")
    # —á—Ç–æ–±—ã —è–≤–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ,
    # –ø–µ—Ä–µ–¥–∞–π—Ç–µ parse_mode=None
    await message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ <s>–∫–∞–∫–æ–π-–ª–∏–±–æ —Ä–∞–∑–º–µ—Ç–∫–∏</s>",
        parse_mode=None
    )


@router.message(Command("hello"))
async def cmd_hello(message: Message):
    """–ù–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–∫–æ–≤ –º —Ç–µ–≥–∞—Ö"""
    await message.answer(
        f"Hello, <b>{message.from_user.full_name}</b>",
        parse_mode=ParseMode.HTML
    )


@router.message(Command("hello2"))
async def cmd_hello(message: Message):
    """–í—Ç–æ—Ä–æ–µ —á—É—Ç—å —Å–ª–æ–∂–Ω–µ–µ, –Ω–æ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ:
    –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º,
    –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –µ–≥–æ –∫—É—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
    –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã."""
    content = Text(
        "Hello, ",
        Bold(message.from_user.full_name)
    )
    await message.answer(
        **content.as_kwargs()
    )


@router.message(Command("advanced_example"))
async def cmd_advanced_example(message: Message):
    content = as_list(
        as_marked_section(
            Bold("Success:"),
            "Test 1",
            "Test 3",
            "Test 4",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("Failed:"),
            "Test 2",
            marker="‚ùå ",
        ),
        as_marked_section(
            Bold("Summary:"),
            as_key_value("Total", 4),
            as_key_value("Success", 3),
            as_key_value("Failed", 1),
            marker="  ",
        ),
        HashTag("#test"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs())


@router.message(F.text)
async def echo_with_time(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ü–ö
    time_now = datetime.now().strftime('%H:%M')
    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
    added_text = html.underline(f"–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await message.answer(f"{message.html_text}\n\n{added_text}", parse_mode="HTML")
